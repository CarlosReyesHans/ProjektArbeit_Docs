2020.06.03 
Starting the general SMs

First to note: The last changes of SPI are in the SPI_TEST branch

This structure should be possible to use at least for 1PWM, Temperature and UART
	
TODO
@2020.06.05
(high priority)
Work with the new library of 1wire over uart
Implement it on the SM of temperature sensor
Adjust the library for PWM to the SM, such that it could work with 2 channels
there should be a function that suspends again the signal comming out from ecattestpin whenever the ecat has a problem




(low priority)
the error flags must use either semaphore or mutex!!

DONE
there should be a way to not let all the threads start at once, or start them as blocked
	THIS IS THE OSTHREADSUSPEND FUNCTION>> NEEDS TO BE TESTED
Check the signal generated by the task of publishin over uart and the one of ecat
	And it works perfectly @ 1ms delay
declare only the function snipets to run the scheduler
Usage of the Os timers and Evenflags
use the osWAituntil to schedule in a better way the ecat
declare only the function snipets to run the scheduler
	-write the notification function
	Cancel the functions that are not defined only for testint purposes
	First prioritization of tasks

/*---------------------------------------------------*/
@2020.06.04
	(high priority)
	-Declare and define the interruption functions, Interrpt service routines
	Define the functions SM for ECAT
	Define the functions for SM for LED
		osWaitUntil << Can be used for signals comming from interrupts?
		startLedDMA(&pwm) << needs to be defined
	-Check signals and queues in CMSIS!!!
		Link functions to OS functions
		startTimeOut(2000);
	SPI_TEST should be merged with the SPI_DEV
		Start with the general SMs in the dev branch, since the changes should be available for all branches
	Config the UART as in the examples.
	Consider the BISS-C connector in the files
	
	(low priority) 
	Transform the loose variables of the channels into an struct. (STM32 handler type, connection ok, overheated, etc)
/*---------------------------------------------------*/

DONE
Within the SM for notification:
				updateTemp2eCAT();		// High Priority
				updateTemp2Print();		// Low Priority TODO this might represent a possible race condition

Define functions for event handler SM
	notifyEvent(EV_ECAT_VERIFIED);

Create the SM for Error Handling:
	void reportError(uint8_t errDef);	update the buffer that is being written over uart and ethercat
	void reportChError(chsetupOK,i); 	special error function that maps to report error depending on the channel
	void reportPWMError(chsetupOK,i); 	NOT NEEDED
	
	Structure of EventHandler SM
	Structure of ECAT SM
	Structure of TEMP SM
	Structure of LED SM 

NOTES:

Configurations
	Timer for system is TIM10 @ APB2 @160 MHz
	Debugger is Serial Wire
	No UART is selected 

Questions is, MPU or FPU activated in the CMSIS?
Maximal Tick_Rate is 1000 Herz?