2020.04.17
/*
*	NEW GIT HELP COOMMANDS
*/

Contents
*	TODO
*
*
*	SSH Keys
*	Config (to match names while changing origins)
*	To Go back to a previous commited point of the branch
*	To filter big files in a branch


TODO

Merge with the one in Ubuntu


///// Commands!

git clone github_url local_directory
git commit
<esc> :wq <enter>
git push
git checkout -b myNewBranch fromThisOrigin


/////	GUI to see the network

gitk

////	CHECK UPDATE STATUS BEFORE PULLING
git remote -v update

or

git remote update
/////	Match origin from local folder to remote started git repository
##	Create the repository and get the link to it
##	Go to the local directory
git init`

#An alternative to avoid merging problems
git remote add origin THE_GIT_LINK
git fetch origin
git checkout -b master --track origin/master # origin/master is clone's default
git pull 
touch .gitignore
#now we can add the new contents

git add .
git commit 

git remote -v ## Verifies
git push origin master


ATENTION!
Solution
The error is resolved by toggling the allow-unrelated-histories switch. After a git pull or git merge command, add the following tag:

git pull origin master --allow-unrelated-histories

///// 	TO UPDATE A PROJECT FROM THE REVISED VERSION TO AN OLD ONE

Create the project from the branch it will be normally used
Create the gitignore file
touch .gitignore
git config --global core.excludesFile ~/.gitignore

Copy an example or extend the one it is already included

To merge the consequent branches without affecting the general independant structure
	of the branches:

git checkout develop	//imagine that the change was made in master and we want it to be in all the other branches
git merge --no-ff master	//master privails as develop has the last changes from master

git checkout feature
git merge --no-ff develop	//now feature has incorporated the updated version of develop, hence feature has the master's changes as well

/*-----------Changing from https to ssh authentication--------------------*/
$ git remote -v
	> origin  https://github.com/USERNAME/REPOSITORY.git (fetch)
	> origin  https://github.com/USERNAME/REPOSITORY.git (push)
$ git remote set-url origin git@github.com:USERNAME/REPOSITORY.git
$ git remote -v		//	verifying
	> origin  git@github.com:USERNAME/REPOSITORY.git (fetch)
	> origin  git@github.com:USERNAME/REPOSITORY.git (push)

**************************************************************
*	USING STASH
**************************************************************
Before changing to any other branch when the modifications are not yet ready

	git stash
	After having shown what was needed and being again in the initial branch, 
		to recover what was previously stashed
	git stash pop

	Before commiting or discarding some changes

	git diff 

	git reset --hard is not recommended better use git stash

	git stash list >> shows the stash stack
	
	When stashing it is more convenient to use messages:
	git stash save "this is a short description for stash"
	
	Select which version of the stash to pop or apply
	git stash pop stash@{X}

**************************************************************
*	To Go back to a previous commited point of the branch
**************************************************************
	
	git stash				//if there is not-committed modifications 
	git log --oneline		//to see all commits in the branchline
	git checkout <commit hash>
	
	git revert <unwanted commit hash>	//if the current branch needs to be reverted to a desired state.
	
	git checkout -b new_branch_name	//if a new branch is willed to be create from the detached HEAD commit stash



**************************************************************
*	SSH Keys
**************************************************************

// Adding an SSH key file to the account such that after pushing there is no
		request of the passphrase

//	Generating the keys
$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
> Enter a file in which to save the key (/c/Users/you/.ssh/id_rsa):[Press enter]

//	Start the ssh-agent
# start the ssh-agent in the background
$ eval $(ssh-agent -s)
> Agent pid XXX
$ ssh-add ~/.ssh/id_rsa

//	Copying the credentials

$ clip < ~/.ssh/id_rsa.pub
# Copies the contents of the id_rsa.pub file to your clipboard


**************************************************************
*	Config (to match names while changing origins)
**************************************************************

git config push.default matching # whenever is needed to match names	



**************************************************************
*	To filter big files in a branch
**************************************************************
git filter-branch --tree-filter 'rm -rf path/to/your/file' HEAD
git push

remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.
remote: error: Trace: b33614f563fab71add044e451e458a72
remote: error: See http://git.io/iEPt8g for more information.
remote: error: File 01_PCB resources/ComponentLibrary/Altium20/Molex_FFC_-_FPC_Connectors_(SMT)/Molex FFC - FPC Connectors (SMT).IntLib is 221.96 MB; this exceeds GitHub's file size limit of 100.00 MB

